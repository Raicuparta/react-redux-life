{"version":3,"sources":["store/actions.js","components/Grid.jsx","components/Controls.jsx","components/App.jsx","store/reducers.js","store/index.js","index.js"],"names":["actionTypes","actions","initCells","width","height","type","payload","toggleCell","x","y","nextTick","updateSetting","key","value","mapDispatchToProps","handleCellClick","connect","state","cells","_ref","react_default","a","createElement","className","map","row","cell","concat","onClick","Controls","intervalId","handlePlayClick","_this","stop","play","clearInterval","setState","_this$props","props","settings","setInterval","interval","handleWidthChange","event","updateDimension","target","handleHeightChange","numericValue","parseInt","handleRandomizeClick","_this$props2","Math","random","render","onChange","prevProps","_this$props$settings","this","prev","React","Component","App","src_components_Controls","src_components_Grid","defaults","SETTINGS","CELLS","mod","index","length","combineReducers","arguments","undefined","Array","fill","initCellsReducer","toggleCellReducer","prevRow","nextRow","nextColumnIndex","prevColumnIndex","aliveCount","nextTickReducer","_ref2","Object","objectSpread","defineProperty","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","es","store","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e75f2d36.chunk.js","sourcesContent":["export const actionTypes = {\n  INIT_CELLS: 'INIT_CELLS',\n  TOGGLE_CELL: 'TOGGLE_CELL',\n  NEXT_TICK: 'NEXT_TICK',\n  UPDATE_SETING: 'UPDATE_SETING',\n};\n\nconst initCells = (width, height) => ({\n  type: actionTypes.INIT_CELLS,\n  payload: {\n    width,\n    height,\n  },\n});\n\nconst toggleCell = (x, y) => ({\n  type: actionTypes.TOGGLE_CELL,\n  payload: {\n    x,\n    y,\n  },\n});\n\nconst updateSetting = (key, value) => ({\n  type: actionTypes.UPDATE_SETING,\n  payload: {\n    key,\n    value,\n  },\n});\n\nconst nextTick = () => ({\n  type: actionTypes.NEXT_TICK,\n});\n\nexport default {\n  initCells,\n  toggleCell,\n  nextTick,\n  updateSetting,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport t from 'prop-types';\n\nimport actions from '../store/actions';\nimport './Grid.css';\n\nconst Grid = ({ cells, handleCellClick }) => (\n  <div className=\"grid\">\n    {\n      cells.map((row, y) => (\n        <div\n          key={y}\n          className=\"row\"\n        >\n          {\n            row.map((cell, x) => (\n              <div\n                key={x}\n                className={`cell ${cell ? 'active' : ''}`}\n                onClick={() => handleCellClick(x, y)}\n              />\n            ))\n          }\n        </div>\n      ))\n    }\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  cells: state.cells,\n});\n\nconst mapDispatchToProps = {\n  handleCellClick: actions.toggleCell,\n};\n\nGrid.propTypes = {\n  cells: t.arrayOf(t.arrayOf(t.number)).isRequired,\n  handleCellClick: t.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Grid);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport t from 'prop-types';\n\nimport actions from '../store/actions';\nimport './Controls.css';\n\nclass Controls extends React.Component {\n  state = {\n    intervalId: null,\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      width,\n      height,\n    } = this.props.settings;\n\n    const prev = prevProps.settings;\n\n    // If the dimensions have been changed, we need to set up\n    // whole cells grid again.\n    if (width !== prev.width || height !== prev.height) {\n      this.props.initCells(height, width);\n    }\n  }\n\n  handlePlayClick = () => {\n    const { intervalId } = this.state;\n\n    if (intervalId) {\n      this.stop();\n    } else {\n      this.play();\n    }\n  }\n\n  stop = () => {\n    const { intervalId } = this.state;\n\n    clearInterval(intervalId);\n    this.setState({\n      intervalId: null,\n    });\n  }\n\n  play = () => {\n    const {\n      nextTick,\n      settings,\n    } = this.props;\n\n    this.setState({\n      intervalId: setInterval(nextTick, settings.interval),\n    });\n  }\n\n  handleWidthChange = (event) => {\n    this.updateDimension('width', event.target.value);\n  }\n\n  handleHeightChange = (event) => {\n    this.updateDimension('height', event.target.value);\n  }\n\n  updateDimension = (key, value) => {\n    this.stop();\n\n    const numericValue = parseInt(value, 10);\n\n    // Validate input\n    if (numericValue < 1) {\n      return;\n    }\n\n    this.props.updateSetting(key, numericValue);\n  }\n\n  handleRandomizeClick = () => {\n    const {\n      settings,\n      toggleCell,\n    } = this.props;\n\n    for (let x = 0; x < settings.width; x++) {\n      for (let y = 0; y < settings.height; y++) {\n        if (Math.random() > 0.5) {\n          toggleCell(x, y);\n        }\n      }\n    }\n  }\n\n  render = () => (\n    <div className=\"controls\">\n      <div className=\"controls-panel\">\n        <button className=\"controls-button\" onClick={this.handleRandomizeClick}>Randomize</button>\n        <button className=\"controls-button\" onClick={this.props.nextTick}>Next</button>\n        <button className=\"controls-button\" onClick={this.handlePlayClick}>\n          {\n            this.state.intervalId ? 'Stop' : 'Play'\n          }\n        </button>\n      </div>\n      <div className=\"controls-panel\">\n        Width\n        <input\n          className=\"controls-field\"\n          type=\"number\"\n          onChange={this.handleWidthChange}\n          value={this.props.settings.width}\n        />\n        Height\n        <input\n          className=\"controls-field\"\n          type=\"number\"\n          onChange={this.handleHeightChange}\n          value={this.props.settings.height}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = {\n  nextTick: actions.nextTick,\n  updateSetting: actions.updateSetting,\n  initCells: actions.initCells,\n  toggleCell: actions.toggleCell,\n};\n\nControls.propTypes = {\n  settings: t.shape({ width: t.number, height: t.number }).isRequired,\n  nextTick: t.func.isRequired,\n  updateSetting: t.func.isRequired,\n  initCells: t.func.isRequired,\n  toggleCell: t.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport t from 'prop-types';\n\nimport actions from '../store/actions';\nimport Grid from './Grid';\nimport Controls from './Controls';\nimport './App.css';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const {\n      initCells,\n      settings,\n    } = this.props;\n\n    initCells(settings.width, settings.height);\n  }\n\n  render = () => (\n    <div className=\"app\">\n      <Controls />\n      <Grid />\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = {\n  initCells: actions.initCells,\n};\n\nApp.propTypes = {\n  settings: t.shape({ width: t.number, height: t.number }).isRequired,\n  initCells: t.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\n\nimport { actionTypes } from './actions';\n\nconst defaults = {\n  SETTINGS: {\n    width: 30,\n    height: 30,\n    interval: 50,\n  },\n  CELLS: [],\n};\n\n// positive mod function to wrap index around array\nconst mod = (index, length) => ((index % length) + length) % length;\n\nconst initCellsReducer = payload => (\n  new Array(payload.width).fill(new Array(payload.height).fill(0))\n);\n\nconst toggleCellReducer = (state, payload) => (\n  state.map((row, y) => row.map((cell, x) => {\n    if (x === payload.x && y === payload.y) {\n      return cell ? 0 : 1;\n    }\n    return cell;\n  }))\n);\n\nconst nextTickReducer = state => state.map((row, y) => row.map((cell, x) => {\n  const prevRow = state[mod(y - 1, row.length)];\n  const nextRow = state[mod(y + 1, row.length)];\n\n  const nextColumnIndex = mod(x + 1, row.length);\n  const prevColumnIndex = mod(x - 1, row.length);\n\n  // count the living neighbours\n  const aliveCount = prevRow[prevColumnIndex]\n    + prevRow[x]\n    + prevRow[nextColumnIndex]\n    + row[prevColumnIndex]\n    + row[nextColumnIndex]\n    + nextRow[prevColumnIndex]\n    + nextRow[x]\n    + nextRow[nextColumnIndex];\n\n  // actual game of life logic, so simple!\n  if (aliveCount < 2 || aliveCount > 3) {\n    return 0;\n  } if (aliveCount === 3) {\n    return 1;\n  }\n  return cell;\n}));\n\nconst cellsReducer = (state = defaults.CELLS, { type, payload }) => {\n  switch (type) {\n    case actionTypes.INIT_CELLS:\n      return initCellsReducer(payload);\n    case actionTypes.TOGGLE_CELL:\n      return toggleCellReducer(state, payload);\n    case actionTypes.NEXT_TICK:\n      return nextTickReducer(state);\n    default:\n      return state;\n  }\n};\n\nconst settingsReducer = (state = defaults.SETTINGS, { type, payload }) => {\n  if (type === actionTypes.UPDATE_SETING) {\n    return {\n      ...state,\n      [payload.key]: payload.value,\n    };\n  }\n  return state;\n};\n\nexport default combineReducers({\n  cells: cellsReducer,\n  settings: settingsReducer,\n});\n","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nexport default createStore(\n  reducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}